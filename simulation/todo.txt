todos:

NEW GENERATION TODOs
1. Help and Help Retract should be more sophisticated
2. Support Retractment
3. Different Attack Modes
4. Router Table for Victim (make it somehow, that victim and allies that are rdy to receive, dont have an active next hop (i.e., all percentage 0)
	-> see generated graph for problem (and in general))
5. Comments <-
	* graph
			* nodes [DONE]
			* route table
			* aux function
			* include mthods in class description?
			* file docstrings
6. ToDos <_
9. Attack vol approximater
	* maybe avg over last few
	* also, help update not every message but only onder condition
10. Run pep8 mod
11. Markdown
12. Command line arguments inclusions for simulation main

To DICUSS:
1) The victim is currently responsible for updating the attack volume, and for calling off the attack. However, if we have a lot of allies on the attack path before the victim, it might not receive anymore attack packets, in which case it can not call off an attack, even if it doesnt take place anymore.
	Solutions:
	1) SourceAS is resonsible for calling off attack and giving attack updates
	2) [Preferred]: If an AS notices, that it will, after deciding on the splits, be the first node on the attack path that will not send any more traffic to the victim, instead, it will send an "attack_update" to the victim , informing it out how much traffic is currently being absorbed by allies? or something like taht

2) For support retracment, any ally assignment, it would be easiest to assume that alliest know all allies and their capabilities; but especially capabilities, sees unrealistic. THe problem is, that we might enter in repitition, because actions are made, before all allies are known; this way, one migh retract, receive an ally, then take back, and so on and so forth. 
	Solutions:
	1) Allies have a process running, that gets triggered once help is initiated. It will advertise its support, and the triggered process will will wait for X steps (2 * max possible transission length), on aafter which it will make the decision. This way, all allies should have all support advertisements, and make the decision with the same inputs. PREFERRED
	2) Have all allies know this ahead -> unrealistic
	3) regarding 1), instead of timeout, it could also know the nr of allies, and wait till it got all advertisements OR a timeout expires

	PROBLEM: since attack vol on victim might be different for all allies, results of algorithm will be different as well...


3) In the Ally decision problem, we first want to collect lal allies, than make an "optimal" decision. However, what we could also do, is to simply stay that all help, and we see who even receives traffic! Some might be enough, so that other do not actually need to help, in which case they retract their help (or simply do nothing????).






LONGTERM:
1) No different ALly/victim/source classes, but only one class AS that can be all depneding on situation
2) Multiple Sources, maybe many many (DISTRIBUTED denial of service)
3) Maybe more sophisticated Routing Table, with real BGP possiblity
4) Tunneling
5) Sources should be source of attack volume updates, so to inform the router tables on the way and give them separate, accurate updates.